//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.34014
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------


using System;
using System.Runtime.Serialization;

namespace iQuoteBrokerService
{

	[System.Diagnostics.DebuggerStepThroughAttribute(), System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0"), System.Runtime.Serialization.DataContractAttribute(Name = "Node", Namespace = "http://schemas.datacontract.org/2004/07/iQuoteBroker.Classes"), System.SerializableAttribute()]
	public partial class Node : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged
	{

		[System.NonSerializedAttribute()]
		private System.Runtime.Serialization.ExtensionDataObject extensionDataField;

		[System.Runtime.Serialization.OptionalFieldAttribute()]
		private System.Guid IdField;

		[System.Runtime.Serialization.OptionalFieldAttribute()]
		private bool IsBrokerField;

		[System.Runtime.Serialization.OptionalFieldAttribute()]
		private System.DateTime LastConnectedField;

		[System.Runtime.Serialization.OptionalFieldAttribute()]
		private string NameField;

		[System.Runtime.Serialization.OptionalFieldAttribute()]
		private string StateStringField;

		[System.ComponentModel.BrowsableAttribute(false)]
		public System.Runtime.Serialization.ExtensionDataObject System.Runtime.Serialization.IExtensibleDataObject.ExtensionData {
			get { return this.extensionDataField; }
			set { this.extensionDataField = value; }
		}

		[System.Runtime.Serialization.DataMemberAttribute()]
		public System.Guid Id {
			get { return this.IdField; }
			set {
				if ((this.IdField.Equals(value) != true)) {
					this.IdField = value;
					this.RaisePropertyChanged("Id");
				}
			}
		}

		[System.Runtime.Serialization.DataMemberAttribute()]
		public bool IsBroker {
			get { return this.IsBrokerField; }
			set {
				if ((this.IsBrokerField.Equals(value) != true)) {
					this.IsBrokerField = value;
					this.RaisePropertyChanged("IsBroker");
				}
			}
		}

		[System.Runtime.Serialization.DataMemberAttribute()]
		public System.DateTime LastConnected {
			get { return this.LastConnectedField; }
			set {
				if ((this.LastConnectedField.Equals(value) != true)) {
					this.LastConnectedField = value;
					this.RaisePropertyChanged("LastConnected");
				}
			}
		}

		[System.Runtime.Serialization.DataMemberAttribute()]
		public string Name {
			get { return this.NameField; }
			set {
				if ((object.ReferenceEquals(this.NameField, value) != true)) {
					this.NameField = value;
					this.RaisePropertyChanged("Name");
				}
			}
		}

		[System.Runtime.Serialization.DataMemberAttribute()]
		public string StateString {
			get { return this.StateStringField; }
			set {
				if ((object.ReferenceEquals(this.StateStringField, value) != true)) {
					this.StateStringField = value;
					this.RaisePropertyChanged("StateString");
				}
			}
		}

		public event System.ComponentModel.PropertyChangedEventHandler System.ComponentModel.INotifyPropertyChanged.PropertyChanged;

		protected void RaisePropertyChanged(string propertyName)
		{
			System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChangedEvent;
			if ((!(propertyChanged) == null)) {
				propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
			}
		}
	}

	[System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0"), System.ServiceModel.ServiceContractAttribute(ConfigurationName = "iQuoteBrokerService.IiQuoteBrokerService")]
	public interface IiQuoteBrokerService
	{

		[System.ServiceModel.OperationContractAttribute(Action = "http://tempuri.org/IiQuoteBrokerService/UpdateObject", ReplyAction = "http://tempuri.org/IiQuoteBrokerService/UpdateObjectResponse")]
		bool UpdateObject(System.Guid Id, string Path, System.Collections.Generic.List<System.Tuple<string, string, object, System.Nullable<int>>> Properties, System.DateTime TimeStamp);

		[System.ServiceModel.OperationContractAttribute(Action = "http://tempuri.org/IiQuoteBrokerService/UpdateObject", ReplyAction = "http://tempuri.org/IiQuoteBrokerService/UpdateObjectResponse")]
		System.Threading.Tasks.Task<bool> UpdateObjectAsync(System.Guid Id, string Path, System.Collections.Generic.List<System.Tuple<string, string, object, System.Nullable<int>>> Properties, System.DateTime TimeStamp);

		[System.ServiceModel.OperationContractAttribute(Action = "http://tempuri.org/IiQuoteBrokerService/RegisterParticipant", ReplyAction = "http://tempuri.org/IiQuoteBrokerService/RegisterParticipantResponse")]
		void RegisterParticipant(System.Guid Id, string Name, string URI, bool IsBroker, bool IsRootNode);

		[System.ServiceModel.OperationContractAttribute(Action = "http://tempuri.org/IiQuoteBrokerService/RegisterParticipant", ReplyAction = "http://tempuri.org/IiQuoteBrokerService/RegisterParticipantResponse")]
		System.Threading.Tasks.Task RegisterParticipantAsync(System.Guid Id, string Name, string URI, bool IsBroker, bool IsRootNode);

		[System.ServiceModel.OperationContractAttribute(Action = "http://tempuri.org/IiQuoteBrokerService/ObjectUpdated", ReplyAction = "http://tempuri.org/IiQuoteBrokerService/ObjectUpdatedResponse")]
		bool ObjectUpdated(System.Guid Id, string Path, System.Collections.Generic.List<System.Tuple<string, string, object, System.Nullable<int>>> Properties, System.DateTime UpdateTime);

		[System.ServiceModel.OperationContractAttribute(Action = "http://tempuri.org/IiQuoteBrokerService/ObjectUpdated", ReplyAction = "http://tempuri.org/IiQuoteBrokerService/ObjectUpdatedResponse")]
		System.Threading.Tasks.Task<bool> ObjectUpdatedAsync(System.Guid Id, string Path, System.Collections.Generic.List<System.Tuple<string, string, object, System.Nullable<int>>> Properties, System.DateTime UpdateTime);

		[System.ServiceModel.OperationContractAttribute(Action = "http://tempuri.org/IiQuoteBrokerService/GetNodes", ReplyAction = "http://tempuri.org/IiQuoteBrokerService/GetNodesResponse")]
		System.Collections.Generic.List<iQuoteBrokerService.Node> GetNodes();

		[System.ServiceModel.OperationContractAttribute(Action = "http://tempuri.org/IiQuoteBrokerService/GetNodes", ReplyAction = "http://tempuri.org/IiQuoteBrokerService/GetNodesResponse")]
		System.Threading.Tasks.Task<System.Collections.Generic.List<iQuoteBrokerService.Node>> GetNodesAsync();
	}

	[System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
	public interface IiQuoteBrokerServiceChannel : iQuoteBrokerService.IiQuoteBrokerService, System.ServiceModel.IClientChannel
	{
	}

	[System.Diagnostics.DebuggerStepThroughAttribute(), System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
	public partial class IiQuoteBrokerServiceClient : System.ServiceModel.ClientBase<iQuoteBrokerService.IiQuoteBrokerService>, iQuoteBrokerService.IiQuoteBrokerService
	{

		public IiQuoteBrokerServiceClient()
		{
			base.New();
		}

		public IiQuoteBrokerServiceClient(string endpointConfigurationName)
		{
			base.New(endpointConfigurationName);
		}

		public IiQuoteBrokerServiceClient(string endpointConfigurationName, string remoteAddress)
		{
			base.New(endpointConfigurationName, remoteAddress);
		}

		public IiQuoteBrokerServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress)
		{
			base.New(endpointConfigurationName, remoteAddress);
		}

		public IiQuoteBrokerServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress)
		{
			base.New(binding, remoteAddress);
		}

		public bool iQuoteBrokerService.IiQuoteBrokerService.UpdateObject(System.Guid Id, string Path, System.Collections.Generic.List<System.Tuple<string, string, object, System.Nullable<int>>> Properties, System.DateTime TimeStamp)
		{
			return base.Channel.UpdateObject(Id, Path, Properties, TimeStamp);
		}

		public System.Threading.Tasks.Task<bool> iQuoteBrokerService.IiQuoteBrokerService.UpdateObjectAsync(System.Guid Id, string Path, System.Collections.Generic.List<System.Tuple<string, string, object, System.Nullable<int>>> Properties, System.DateTime TimeStamp)
		{
			return base.Channel.UpdateObjectAsync(Id, Path, Properties, TimeStamp);
		}

		public void iQuoteBrokerService.IiQuoteBrokerService.RegisterParticipant(System.Guid Id, string Name, string URI, bool IsBroker, bool IsRootNode)
		{
			base.Channel.RegisterParticipant(Id, Name, URI, IsBroker, IsRootNode);
		}

		public System.Threading.Tasks.Task iQuoteBrokerService.IiQuoteBrokerService.RegisterParticipantAsync(System.Guid Id, string Name, string URI, bool IsBroker, bool IsRootNode)
		{
			return base.Channel.RegisterParticipantAsync(Id, Name, URI, IsBroker, IsRootNode);
		}

		public bool iQuoteBrokerService.IiQuoteBrokerService.ObjectUpdated(System.Guid Id, string Path, System.Collections.Generic.List<System.Tuple<string, string, object, System.Nullable<int>>> Properties, System.DateTime UpdateTime)
		{
			return base.Channel.ObjectUpdated(Id, Path, Properties, UpdateTime);
		}

		public System.Threading.Tasks.Task<bool> iQuoteBrokerService.IiQuoteBrokerService.ObjectUpdatedAsync(System.Guid Id, string Path, System.Collections.Generic.List<System.Tuple<string, string, object, System.Nullable<int>>> Properties, System.DateTime UpdateTime)
		{
			return base.Channel.ObjectUpdatedAsync(Id, Path, Properties, UpdateTime);
		}

		public System.Collections.Generic.List<iQuoteBrokerService.Node> iQuoteBrokerService.IiQuoteBrokerService.GetNodes()
		{
			return base.Channel.GetNodes;
		}

		public System.Threading.Tasks.Task<System.Collections.Generic.List<iQuoteBrokerService.Node>> iQuoteBrokerService.IiQuoteBrokerService.GetNodesAsync()
		{
			return base.Channel.GetNodesAsync;
		}
	}
}
