//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18444
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------


using System;
using System.Runtime.Serialization;

namespace IngramPB
{

	[System.Diagnostics.DebuggerStepThroughAttribute(), System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0"), System.Runtime.Serialization.DataContractAttribute(Name = "clsLog.Node", Namespace = "http://schemas.datacontract.org/2004/07/treeview"), System.SerializableAttribute()]
	public partial class clsLogNode : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged
	{

		[System.NonSerializedAttribute()]
		private System.Runtime.Serialization.ExtensionDataObject extensionDataField;

		[System.Runtime.Serialization.OptionalFieldAttribute()]
		private int IDField;

		[System.Runtime.Serialization.OptionalFieldAttribute()]
		private IngramPB.QueueOfint childrenField;

		[System.Runtime.Serialization.OptionalFieldAttribute()]
		private string messageField;

		[System.Runtime.Serialization.OptionalFieldAttribute()]
		private int parentField;

		[System.Runtime.Serialization.OptionalFieldAttribute()]
		private int severityField;

		[System.Runtime.Serialization.OptionalFieldAttribute()]
		private System.DateTime timestampField;

		[System.ComponentModel.BrowsableAttribute(false)]
		public System.Runtime.Serialization.ExtensionDataObject System.Runtime.Serialization.IExtensibleDataObject.ExtensionData {
			get { return this.extensionDataField; }
			set { this.extensionDataField = value; }
		}

		[System.Runtime.Serialization.DataMemberAttribute()]
		public int ID {
			get { return this.IDField; }
			set {
				if ((this.IDField.Equals(value) != true)) {
					this.IDField = value;
					this.RaisePropertyChanged("ID");
				}
			}
		}

		[System.Runtime.Serialization.DataMemberAttribute()]
		public IngramPB.QueueOfint children {
			get { return this.childrenField; }
			set {
				if ((object.ReferenceEquals(this.childrenField, value) != true)) {
					this.childrenField = value;
					this.RaisePropertyChanged("children");
				}
			}
		}

		[System.Runtime.Serialization.DataMemberAttribute()]
		public string message {
			get { return this.messageField; }
			set {
				if ((object.ReferenceEquals(this.messageField, value) != true)) {
					this.messageField = value;
					this.RaisePropertyChanged("message");
				}
			}
		}

		[System.Runtime.Serialization.DataMemberAttribute()]
		public int parent {
			get { return this.parentField; }
			set {
				if ((this.parentField.Equals(value) != true)) {
					this.parentField = value;
					this.RaisePropertyChanged("parent");
				}
			}
		}

		[System.Runtime.Serialization.DataMemberAttribute()]
		public int severity {
			get { return this.severityField; }
			set {
				if ((this.severityField.Equals(value) != true)) {
					this.severityField = value;
					this.RaisePropertyChanged("severity");
				}
			}
		}

		[System.Runtime.Serialization.DataMemberAttribute()]
		public System.DateTime timestamp {
			get { return this.timestampField; }
			set {
				if ((this.timestampField.Equals(value) != true)) {
					this.timestampField = value;
					this.RaisePropertyChanged("timestamp");
				}
			}
		}

		public event System.ComponentModel.PropertyChangedEventHandler System.ComponentModel.INotifyPropertyChanged.PropertyChanged;

		protected void RaisePropertyChanged(string propertyName)
		{
			System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChangedEvent;
			if ((!(propertyChanged) == null)) {
				propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
			}
		}
	}

	[System.Diagnostics.DebuggerStepThroughAttribute(), System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0"), System.Runtime.Serialization.DataContractAttribute(Name = "QueueOfint", Namespace = "http://schemas.datacontract.org/2004/07/System.Collections.Generic"), System.SerializableAttribute()]
	public partial class QueueOfint : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged
	{

		[System.NonSerializedAttribute()]
		private System.Runtime.Serialization.ExtensionDataObject extensionDataField;

		private int[] _arrayField;

		private int _headField;

		private int _sizeField;

		private int _tailField;

		private int _versionField;

		[System.ComponentModel.BrowsableAttribute(false)]
		public System.Runtime.Serialization.ExtensionDataObject System.Runtime.Serialization.IExtensibleDataObject.ExtensionData {
			get { return this.extensionDataField; }
			set { this.extensionDataField = value; }
		}

		[System.Runtime.Serialization.DataMemberAttribute(IsRequired = true)]
		public int[] _array {
			get { return this._arrayField; }
			set {
				if ((object.ReferenceEquals(this._arrayField, value) != true)) {
					this._arrayField = value;
					this.RaisePropertyChanged("_array");
				}
			}
		}

		[System.Runtime.Serialization.DataMemberAttribute(IsRequired = true)]
		public int _head {
			get { return this._headField; }
			set {
				if ((this._headField.Equals(value) != true)) {
					this._headField = value;
					this.RaisePropertyChanged("_head");
				}
			}
		}

		[System.Runtime.Serialization.DataMemberAttribute(IsRequired = true)]
		public int _size {
			get { return this._sizeField; }
			set {
				if ((this._sizeField.Equals(value) != true)) {
					this._sizeField = value;
					this.RaisePropertyChanged("_size");
				}
			}
		}

		[System.Runtime.Serialization.DataMemberAttribute(IsRequired = true)]
		public int _tail {
			get { return this._tailField; }
			set {
				if ((this._tailField.Equals(value) != true)) {
					this._tailField = value;
					this.RaisePropertyChanged("_tail");
				}
			}
		}

		[System.Runtime.Serialization.DataMemberAttribute(IsRequired = true)]
		public int _version {
			get { return this._versionField; }
			set {
				if ((this._versionField.Equals(value) != true)) {
					this._versionField = value;
					this.RaisePropertyChanged("_version");
				}
			}
		}

		public event System.ComponentModel.PropertyChangedEventHandler System.ComponentModel.INotifyPropertyChanged.PropertyChanged;

		protected void RaisePropertyChanged(string propertyName)
		{
			System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChangedEvent;
			if ((!(propertyChanged) == null)) {
				propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
			}
		}
	}

	[System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0"), System.ServiceModel.ServiceContractAttribute(ConfigurationName = "IngramPB.I_Logging")]
	public interface I_Logging
	{

		[System.ServiceModel.OperationContractAttribute(Action = "http://tempuri.org/I_Logging/GetLogNode", ReplyAction = "http://tempuri.org/I_Logging/GetLogNodeResponse")]
		IngramPB.clsLogNode GetLogNode(int nodeID);

		[System.ServiceModel.OperationContractAttribute(Action = "http://tempuri.org/I_Logging/GetLogNode", ReplyAction = "http://tempuri.org/I_Logging/GetLogNodeResponse")]
		System.Threading.Tasks.Task<IngramPB.clsLogNode> GetLogNodeAsync(int nodeID);

		[System.ServiceModel.OperationContractAttribute(Action = "http://tempuri.org/I_Logging/GetNodeChildren", ReplyAction = "http://tempuri.org/I_Logging/GetNodeChildrenResponse")]
		IngramPB.clsLogNode[] GetNodeChildren(int nodeID);

		[System.ServiceModel.OperationContractAttribute(Action = "http://tempuri.org/I_Logging/GetNodeChildren", ReplyAction = "http://tempuri.org/I_Logging/GetNodeChildrenResponse")]
		System.Threading.Tasks.Task<IngramPB.clsLogNode[]> GetNodeChildrenAsync(int nodeID);

		[System.ServiceModel.OperationContractAttribute(Action = "http://tempuri.org/I_Logging/find", ReplyAction = "http://tempuri.org/I_Logging/findResponse")]
		IngramPB.clsLogNode[] find(int nodeID, string text);

		[System.ServiceModel.OperationContractAttribute(Action = "http://tempuri.org/I_Logging/find", ReplyAction = "http://tempuri.org/I_Logging/findResponse")]
		System.Threading.Tasks.Task<IngramPB.clsLogNode[]> findAsync(int nodeID, string text);

		[System.ServiceModel.OperationContractAttribute(Action = "http://tempuri.org/I_Logging/Ancestors", ReplyAction = "http://tempuri.org/I_Logging/AncestorsResponse")]
		int[] Ancestors(int nodeID);

		[System.ServiceModel.OperationContractAttribute(Action = "http://tempuri.org/I_Logging/Ancestors", ReplyAction = "http://tempuri.org/I_Logging/AncestorsResponse")]
		System.Threading.Tasks.Task<int[]> AncestorsAsync(int nodeID);

		[System.ServiceModel.OperationContractAttribute(Action = "http://tempuri.org/I_Logging/Prune", ReplyAction = "http://tempuri.org/I_Logging/PruneResponse")]
		int Prune(int nodeID, bool slash);

		[System.ServiceModel.OperationContractAttribute(Action = "http://tempuri.org/I_Logging/Prune", ReplyAction = "http://tempuri.org/I_Logging/PruneResponse")]
		System.Threading.Tasks.Task<int> PruneAsync(int nodeID, bool slash);

		[System.ServiceModel.OperationContractAttribute(Action = "http://tempuri.org/I_Logging/IngramPriceBand", ReplyAction = "http://tempuri.org/I_Logging/IngramPriceBandResponse")]
		int IngramPriceBand(string hostid, string customerNumber);

		[System.ServiceModel.OperationContractAttribute(Action = "http://tempuri.org/I_Logging/IngramPriceBand", ReplyAction = "http://tempuri.org/I_Logging/IngramPriceBandResponse")]
		System.Threading.Tasks.Task<int> IngramPriceBandAsync(string hostid, string customerNumber);
	}

	[System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
	public interface I_LoggingChannel : IngramPB.I_Logging, System.ServiceModel.IClientChannel
	{
	}

	[System.Diagnostics.DebuggerStepThroughAttribute(), System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
	public partial class I_LoggingClient : System.ServiceModel.ClientBase<IngramPB.I_Logging>, IngramPB.I_Logging
	{

		public I_LoggingClient()
		{
			base.New();
		}

		public I_LoggingClient(string endpointConfigurationName)
		{
			base.New(endpointConfigurationName);
		}

		public I_LoggingClient(string endpointConfigurationName, string remoteAddress)
		{
			base.New(endpointConfigurationName, remoteAddress);
		}

		public I_LoggingClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress)
		{
			base.New(endpointConfigurationName, remoteAddress);
		}

		public I_LoggingClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress)
		{
			base.New(binding, remoteAddress);
		}

		public IngramPB.clsLogNode IngramPB.I_Logging.GetLogNode(int nodeID)
		{
			return base.Channel.GetLogNode(nodeID);
		}

		public System.Threading.Tasks.Task<IngramPB.clsLogNode> IngramPB.I_Logging.GetLogNodeAsync(int nodeID)
		{
			return base.Channel.GetLogNodeAsync(nodeID);
		}

		public IngramPB.clsLogNode[] IngramPB.I_Logging.GetNodeChildren(int nodeID)
		{
			return base.Channel.GetNodeChildren(nodeID);
		}

		public System.Threading.Tasks.Task<IngramPB.clsLogNode[]> IngramPB.I_Logging.GetNodeChildrenAsync(int nodeID)
		{
			return base.Channel.GetNodeChildrenAsync(nodeID);
		}

		public IngramPB.clsLogNode[] IngramPB.I_Logging.find(int nodeID, string text)
		{
			return base.Channel.find(nodeID, text);
		}

		public System.Threading.Tasks.Task<IngramPB.clsLogNode[]> IngramPB.I_Logging.findAsync(int nodeID, string text)
		{
			return base.Channel.findAsync(nodeID, text);
		}

		public int[] IngramPB.I_Logging.Ancestors(int nodeID)
		{
			return base.Channel.Ancestors(nodeID);
		}

		public System.Threading.Tasks.Task<int[]> IngramPB.I_Logging.AncestorsAsync(int nodeID)
		{
			return base.Channel.AncestorsAsync(nodeID);
		}

		public int IngramPB.I_Logging.Prune(int nodeID, bool slash)
		{
			return base.Channel.Prune(nodeID, slash);
		}

		public System.Threading.Tasks.Task<int> IngramPB.I_Logging.PruneAsync(int nodeID, bool slash)
		{
			return base.Channel.PruneAsync(nodeID, slash);
		}

		public int IngramPB.I_Logging.IngramPriceBand(string hostid, string customerNumber)
		{
			return base.Channel.IngramPriceBand(hostid, customerNumber);
		}

		public System.Threading.Tasks.Task<int> IngramPB.I_Logging.IngramPriceBandAsync(string hostid, string customerNumber)
		{
			return base.Channel.IngramPriceBandAsync(hostid, customerNumber);
		}
	}
}
